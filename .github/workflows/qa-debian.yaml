name: Debian package tests
# Builds the client debian package and attempt to install it locally to run a set of toy tests as well as autopkgtest.

on:
  pull_request:
    paths-ignore:
      - server/**
      - tools/**
      - "*.md"
  workflow_dispatch:
  push:
    branches: [main]

env:
  UBUNTU_VERSIONS: |
    ["devel"]
  AUTOPKGTEST_HOST: |
    ["ubuntu-24.04", "ubuntu-24.04-arm"]

jobs:
  plan:
    name: Create test plan # Dynamic matrix generation for subsequent jobs
    runs-on: ubuntu-latest
    outputs:
      ubuntu-versions: ${{ env.UBUNTU_VERSIONS }}
      autopkgtest-host: ${{ env.AUTOPKGTEST_HOST }}
    steps:
      - run: "true"

  build-ubuntu-insights:
    name: Build ubuntu-insights debian package
    needs: plan
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: ${{ fromJSON(needs.plan.outputs.ubuntu-versions) }}
    runs-on: ubuntu-latest
    outputs:
      run-id: ${{ github.run_id }}
      pkg-dsc-devel: ${{ steps.outputs.outputs.pkg-dsc-devel }}
      pkg-src-changes-devel: ${{ steps.outputs.outputs.pkg-src-changes-devel }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build debian package
        uses: canonical/desktop-engineering/gh-actions/common/build-debian@main
        with:
          source-dir: insights
          token: ${{ secrets.GITHUB_TOKEN }}
          docker-image: ubuntu:${{ matrix.ubuntu-version }}

      - name: Generate outputs
        id: outputs
        run: |
          (
            echo "pkg-dsc-${{ matrix.ubuntu-version }}=${{ env.PKG_DSC }}"
            echo "pkg-src-changes-${{ matrix.ubuntu-version }}=${{ env.PKG_SOURCE_CHANGES }}"
          ) >> "${GITHUB_OUTPUT}"

  qa:
    name: Run trivial debian package tests
    needs:
      - plan
      - build-ubuntu-insights
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: ${{ fromJSON(needs.plan.outputs.ubuntu-versions) }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          run-id: ${{ needs.build-ubuntu-insights.outputs.run-id }}
          merge-multiple: true

      - name: Install ubuntu-insights debian package
        run: |
          sudo apt install -y ./ubuntu-insights_*.deb

      - name: Ensure man page is installed
        run: |
          MANPAGER=cat man ubuntu-insights

      - name: Ensure systemd units are installed
        run: |
          # Verify systemd can find the units (will succeed even if inactive)
          systemctl --user --no-pager list-unit-files ubuntu-insights-collect.service
          systemctl --user --no-pager list-unit-files ubuntu-insights-collect.timer
          systemctl --user --no-pager list-unit-files ubuntu-insights-upload.service
          systemctl --user --no-pager list-unit-files ubuntu-insights-upload.timer

      - name: Run trivial tests
        run:
          | # Go through a typical workflow, ensuring that no errors are encountered. This should eventually be replaced with true end-to-end tests.
          ubuntu-insights --version
          ubuntu-insights --help
          ubuntu-insights collect -df
          ubuntu-insights collect
          ubuntu-insights consent -s=true
          ubuntu-insights collect
          ubuntu-insights upload -df

  autopkgtest:
    name: Run autopkgtest
    strategy:
      fail-fast: false
      matrix:
        ubuntu-version: ${{ fromJSON(needs.plan.outputs.ubuntu-versions) }}
        autopkgtest-host: ${{ fromJSON(needs.plan.outputs.autopkgtest-host) }}
    runs-on: ${{ matrix.autopkgtest-host }}
    needs:
      - plan
      - build-ubuntu-insights
    steps:
      # Copied from https://github.com/ubuntu/authd/blob/main/.github/workflows/build-deb.yaml
      # FIXME: Use dynamic outputs when possible: https://github.com/actions/runner/pull/2477
      - name: Plan autopkgtest job
        run: |
          set -exuo pipefail

          json_output='${{ toJSON(needs.build-ubuntu-insights.outputs) }}'
          for var in $(echo "${json_output}" | jq -r 'keys | .[]'); do
            if [[ "${var}" != *"-${{ matrix.ubuntu-version }}" ]]; then
              continue;
            fi

            v=$(echo "${json_output}" | jq -r ".\"${var}\"")
            var="${var%-${{ matrix.ubuntu-version }}}"
            echo "${var//-/_}=${v}" >> "${GITHUB_ENV}"
            # Environment variable names cannot contain hyphens, so replace them with underscores before exporting.
          done

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          run-id: ${{ needs.build-ubuntu-insights.outputs.run-id }}
          merge-multiple: true

      - name: Run autopkgtest
        uses: canonical/desktop-engineering/gh-actions/common/run-autopkgtest@main
        with:
          lxd-image: ubuntu:${{ matrix.ubuntu-version }}
          source-changes: ${{ env.pkg_src_changes }}
